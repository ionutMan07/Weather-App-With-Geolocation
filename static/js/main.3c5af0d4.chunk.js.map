{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","city","setCity","weather","setWeather","weatherLocation","setWeatherLocation","apiKey","process","searchCity","e","key","length","URL","fetch","then","res","json","result","setTimeout","getWeatherbyLocation","position","lat","coords","latitude","lon","longitude","Number","console","log","onError","className","type","placeholder","onChange","target","value","onKeyPress","onClick","stroke","fill","stroke-width","viewBox","height","width","xmlns","fill-rule","d","clip-rule","navigator","geolocation","getCurrentPosition","main","name","Math","round","temp","feels_like","src","icon","alt","humidity","wind","speed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c5af0d4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState({});\n  const [weatherLocation, setWeatherLocation] = useState([]);\n\n  const apiKey = process.env.REACT_APP_API_KEY;\n\n  const searchCity = (e) => {\n    if (e.key === 'Enter' || city.length > 2) {\n      const URL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`;\n      fetch(URL)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setTimeout(() => setCity(''), 1000);\n        });\n    }\n  };\n\n  const getWeatherbyLocation = (position) => {\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    if (lat || lon === Number) {\n      const URL = `https://api.openweathermap.org/data/2.5/find?lat=${lat}&lon=${lon}&units=metric&&cnd=1&appid=${apiKey}`;\n      fetch(URL)\n        .then((res) => res.json())\n        .then((result) => {\n          console.log(result);\n          setWeatherLocation(result);\n          console.log(weatherLocation);\n        });\n    }\n  };\n\n  const onError = () => {\n    console.log('unable to locate');\n  };\n\n  const locate = () => {\n    navigator.geolocation.getCurrentPosition(getWeatherbyLocation, onError);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"search\">\n          <input\n            className=\"search-bar\"\n            type=\"text\"\n            placeholder=\"Search city\"\n            onChange={(e) => setCity(e.target.value)}\n            value={city}\n            onKeyPress={searchCity}\n          ></input>\n          <button onClick={searchCity}>\n            <svg\n              stroke=\"currentColor\"\n              fill=\"currentColor\"\n              stroke-width=\"0\"\n              viewBox=\"0 0 16 16\"\n              height=\"1em\"\n              width=\"1em\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                fill-rule=\"evenodd\"\n                d=\"M10.442 10.442a1 1 0 011.415 0l3.85 3.85a1 1 0 01-1.414 1.415l-3.85-3.85a1 1 0 010-1.415z\"\n                clip-rule=\"evenodd\"\n              ></path>\n              <path\n                fill-rule=\"evenodd\"\n                d=\"M6.5 12a5.5 5.5 0 100-11 5.5 5.5 0 000 11zM13 6.5a6.5 6.5 0 11-13 0 6.5 6.5 0 0113 0z\"\n                clip-rule=\"evenodd\"\n                width=\"1.5em\"\n                height=\"1.5em\"\n              ></path>\n            </svg>\n          </button>\n          <button onClick={locate}>\n            <svg\n              stroke=\"currentColor\"\n              fill=\"currentColor\"\n              stroke-width=\"0\"\n              viewBox=\"0 0 12 16\"\n              height=\"1em\"\n              width=\"1em\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                fill-rule=\"evenodd\"\n                d=\"M6 0C2.69 0 0 2.5 0 5.5 0 10.02 6 16 6 16s6-5.98 6-10.5C12 2.5 9.31 0 6 0zm0 14.55C4.14 12.52 1 8.44 1 5.5 1 3.02 3.25 1 6 1c1.34 0 2.61.48 3.56 1.36.92.86 1.44 1.97 1.44 3.14 0 2.94-3.14 7.02-5 9.05zM8 5.5c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z\"\n                width=\"1.5em\"\n                height=\"1.5em\"\n              ></path>\n            </svg>\n          </button>\n        </div>\n        {typeof weather.main != 'undefined' ? (\n          <div className=\"weather\">\n            <h2 className=\"city mt-3\">Weather in {weather.name}</h2>\n            <div className=\"temp col d-flex \">\n              <h1>{Math.round(weather.main.temp)}°C</h1>\n              <h3 className=\"mt-2 ml-4\">\n                feels like: {Math.round(weather.main.feels_like)}°C\n              </h3>\n            </div>\n            <img\n              className=\"icon\"\n              src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n              alt={weather.weather[0].icon}\n            />\n            <div className=\"decription\">{weather.weather[0].main}</div>\n            <div className=\"humidity\">Humidity: {weather.main.humidity}%</div>\n            <div className=\"wind\">Wind speed {weather.wind.speed} km/h</div>\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}