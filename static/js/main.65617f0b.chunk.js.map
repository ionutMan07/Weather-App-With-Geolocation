{"version":3,"sources":["shared/SearchByCityAPI.js","shared/SearchByCoordAPI.js","App.js","reportWebVitals.js","index.js"],"names":["SearchByCityAPI","city","a","axios","get","params","q","units","appid","process","data","SearchByCoordAPI","position","lat","coords","latitude","lon","longitude","Number","cnd","App","useState","setCity","weather","setWeather","message","setMessage","searchCity","e","key","length","searchCityByCoord","list","onError","className","type","placeholder","onChange","target","value","onKeyPress","onClick","stroke","fill","stroke-width","viewBox","height","width","xmlns","fill-rule","d","clip-rule","navigator","geolocation","getCurrentPosition","main","name","Math","round","temp","feels_like","src","icon","alt","humidity","wind","speed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65617f0b.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\n\r\nexport const SearchByCityAPI = async (city) => {\r\n  const { data } = await axios.get(URL, {\r\n    params: {\r\n      q: city,\r\n      units: 'metric',\r\n      appid: apiKey,\r\n    },\r\n  });\r\n  return data;\r\n};\r\n","import axios from 'axios';\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/find';\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\n\r\nexport const SearchByCoordAPI = async (position) => {\r\n  const lat = position.coords.latitude;\r\n  const lon = position.coords.longitude;\r\n  if (lat || lon === Number) {\r\n    const { data } = await axios.get(URL, {\r\n      params: {\r\n        lat: lat,\r\n        lon: lon,\r\n        cnd: 1,\r\n        units: 'metric',\r\n        appid: apiKey,\r\n      },\r\n    });\r\n    return data;\r\n  }\r\n};\r\n","import React, { useState } from 'react';\nimport { SearchByCityAPI } from './shared/SearchByCityAPI';\nimport { SearchByCoordAPI } from './shared/SearchByCoordAPI';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState({});\n  const [message, setMessage] = useState('Search by city name or location');\n\n  const searchCity = async (e) => {\n    if (e.key === 'Enter' || city.length > 2) {\n      const data = await SearchByCityAPI(city);\n      setWeather(data);\n    }\n  };\n\n  const searchCityByCoord = async (position) => {\n    const data = await SearchByCoordAPI(position);\n    setWeather(data.list[0]);\n  };\n\n  const onError = () => {\n    setMessage('Unable to locate');\n  };\n\n  const locate = () => {\n    navigator.geolocation.getCurrentPosition(searchCityByCoord, onError);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"search\">\n          <input\n            className=\"search-bar\"\n            type=\"text\"\n            placeholder=\"Search...\"\n            onChange={(e) => setCity(e.target.value)}\n            value={city}\n            onKeyPress={searchCity}\n          ></input>\n          <button onClick={searchCity}>\n            <svg\n              stroke=\"currentColor\"\n              fill=\"currentColor\"\n              stroke-width=\"0\"\n              viewBox=\"0 0 16 16\"\n              height=\"1em\"\n              width=\"1em\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                fill-rule=\"evenodd\"\n                d=\"M10.442 10.442a1 1 0 011.415 0l3.85 3.85a1 1 0 01-1.414 1.415l-3.85-3.85a1 1 0 010-1.415z\"\n                clip-rule=\"evenodd\"\n              ></path>\n              <path\n                fill-rule=\"evenodd\"\n                d=\"M6.5 12a5.5 5.5 0 100-11 5.5 5.5 0 000 11zM13 6.5a6.5 6.5 0 11-13 0 6.5 6.5 0 0113 0z\"\n                clip-rule=\"evenodd\"\n                width=\"1.5em\"\n                height=\"1.5em\"\n              ></path>\n            </svg>\n          </button>\n          <button onClick={locate}>\n            <svg\n              stroke=\"currentColor\"\n              fill=\"currentColor\"\n              stroke-width=\"0\"\n              viewBox=\"0 0 12 16\"\n              height=\"1em\"\n              width=\"1em\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                fill-rule=\"evenodd\"\n                d=\"M6 0C2.69 0 0 2.5 0 5.5 0 10.02 6 16 6 16s6-5.98 6-10.5C12 2.5 9.31 0 6 0zm0 14.55C4.14 12.52 1 8.44 1 5.5 1 3.02 3.25 1 6 1c1.34 0 2.61.48 3.56 1.36.92.86 1.44 1.97 1.44 3.14 0 2.94-3.14 7.02-5 9.05zM8 5.5c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z\"\n                width=\"1.5em\"\n                height=\"1.5em\"\n              ></path>\n            </svg>\n          </button>\n        </div>\n        {typeof weather.main != 'undefined' ? (\n          <div className=\"weather\">\n            <h2 className=\"city mt-3\">Weather in {weather.name}</h2>\n            <div className=\"temp col d-flex \">\n              <h1>{Math.round(weather.main.temp)}°C</h1>\n            </div>\n            <h3 className=\"mt-2 ml-2\">\n              feels like: {Math.round(weather.main.feels_like)}°C\n            </h3>\n            <img\n              className=\"icon\"\n              src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n              alt={weather.weather[0].icon}\n            />\n            <div className=\"decription\">{weather.weather[0].main}</div>\n            <div className=\"humidity\">Humidity: {weather.main.humidity}%</div>\n            <div className=\"wind\">Wind speed {weather.wind.speed} km/h</div>\n          </div>\n        ) : (\n          <div>{message}</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}